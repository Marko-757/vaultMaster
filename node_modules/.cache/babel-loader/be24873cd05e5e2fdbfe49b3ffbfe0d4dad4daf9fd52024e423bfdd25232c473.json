{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\GitHub\\\\vaultMaster\\\\src\\\\pages\\\\personal_pw_manager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Sidebar from \"../components/sidebar\";\nimport FileList from \"../components/fileList\";\nimport PasswordInformation from \"../components/passwordInformation\";\nimport AddPasswordForm from \"../components/addPasswordForm\";\nimport AddFolderForm from \"../components/addFolderForm\";\nimport \"./personal_pw_manager.css\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PersonalPwManager() {\n  _s();\n  const [passwords, setPasswords] = useState([]);\n  const [passwordFolders, setPasswordFolders] = useState([]);\n  const [fileFolders, setFileFolders] = useState([]);\n  const [files, setFiles] = useState([]); // State for file content\n  const [selectedFolder, setSelectedFolder] = useState(null); // null means \"All Passwords\" or \"All Files\"\n  const [selectedPassword, setSelectedPassword] = useState(null);\n  const [selectedFileFolder, setSelectedFileFolder] = useState(null); // Track selected file folder\n  const [isAddingPassword, setIsAddingPassword] = useState(false);\n  const [isAddingPasswordFolder, setIsAddingPasswordFolder] = useState(false);\n  const [isAddingFileFolder, setIsAddingFileFolder] = useState(false);\n\n  // Add Password\n  const addPassword = newPassword => {\n    setPasswords([...passwords, {\n      id: passwords.length + 1,\n      folderId: (selectedFolder === null || selectedFolder === void 0 ? void 0 : selectedFolder.id) || null,\n      ...newPassword\n    }]);\n    setIsAddingPassword(false);\n  };\n\n  // Add Folder for Passwords\n  const addPasswordFolder = folderName => {\n    setPasswordFolders([...passwordFolders, {\n      id: passwordFolders.length + 1,\n      name: folderName\n    }]);\n    setIsAddingPasswordFolder(false);\n  };\n\n  // Add Folder for Files\n  const addFileFolder = folderName => {\n    setFileFolders([...fileFolders, {\n      id: fileFolders.length + 1,\n      name: folderName\n    }]);\n    setIsAddingFileFolder(false);\n  };\n\n  // Delete Folder for Passwords\n  const deletePasswordFolder = folderId => {\n    if (window.confirm(\"Are you sure you want to delete this folder?\")) {\n      const updatedFolders = passwordFolders.filter(folder => folder.id !== folderId);\n      setPasswordFolders(updatedFolders);\n\n      // Remove folder association from passwords\n      const updatedPasswords = passwords.map(password => password.folderId === folderId ? {\n        ...password,\n        folderId: null\n      } : password);\n      setPasswords(updatedPasswords);\n    }\n  };\n\n  // Delete Folder for Files\n  const deleteFileFolder = folderId => {\n    if (window.confirm(\"Are you sure you want to delete this folder?\")) {\n      const updatedFolders = fileFolders.filter(folder => folder.id !== folderId);\n      setFileFolders(updatedFolders);\n\n      // Remove folder association from files\n      const updatedFiles = files.filter(file => file.folderId !== folderId);\n      setFiles(updatedFiles);\n    }\n  };\n\n  // Filtered Files by Folder\n  const filteredFiles = selectedFileFolder === null ? files : files.filter(file => file.folderId === selectedFileFolder.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pw-manager-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        title: \"Passwords\",\n        items: passwordFolders,\n        onSelectItem: folder => setSelectedFolder(folder),\n        onAddItem: () => setIsAddingPasswordFolder(true),\n        onDeleteItem: deletePasswordFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        title: \"Files\",\n        items: fileFolders,\n        onSelectItem: folder => setSelectedFileFolder(folder) // Set the selected file folder\n        ,\n        onAddItem: () => setIsAddingFileFolder(true),\n        onDeleteItem: deleteFileFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(FileList, {\n        passwords: passwords.filter(password => !selectedFolder || password.folderId === selectedFolder.id),\n        onSelectPassword: password => setSelectedPassword(password),\n        onAddPassword: () => setIsAddingPassword(true),\n        onDeletePassword: id => setPasswords(passwords.filter(password => password.id !== id))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), isAddingPassword && /*#__PURE__*/_jsxDEV(AddPasswordForm, {\n        folders: passwordFolders,\n        selectedFolder: selectedFolder,\n        onSave: addPassword,\n        onCancel: () => setIsAddingPassword(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), isAddingPasswordFolder && /*#__PURE__*/_jsxDEV(AddFolderForm, {\n        onSave: addPasswordFolder,\n        onCancel: () => setIsAddingPasswordFolder(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), isAddingFileFolder && /*#__PURE__*/_jsxDEV(AddFolderForm, {\n        onSave: addFileFolder,\n        onCancel: () => setIsAddingFileFolder(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), selectedPassword && /*#__PURE__*/_jsxDEV(PasswordInformation, {\n        password: selectedPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 30\n      }, this), selectedFileFolder && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-folder-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedFileFolder.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: filteredFiles.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: file.name\n          }, file.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(PersonalPwManager, \"08xSsN7mRserpsQyH8O+X0WoggI=\");\n_c = PersonalPwManager;\nexport default PersonalPwManager;\nvar _c;\n$RefreshReg$(_c, \"PersonalPwManager\");","map":{"version":3,"names":["React","useState","Sidebar","FileList","PasswordInformation","AddPasswordForm","AddFolderForm","useNavigate","jsxDEV","_jsxDEV","PersonalPwManager","_s","passwords","setPasswords","passwordFolders","setPasswordFolders","fileFolders","setFileFolders","files","setFiles","selectedFolder","setSelectedFolder","selectedPassword","setSelectedPassword","selectedFileFolder","setSelectedFileFolder","isAddingPassword","setIsAddingPassword","isAddingPasswordFolder","setIsAddingPasswordFolder","isAddingFileFolder","setIsAddingFileFolder","addPassword","newPassword","id","length","folderId","addPasswordFolder","folderName","name","addFileFolder","deletePasswordFolder","window","confirm","updatedFolders","filter","folder","updatedPasswords","map","password","deleteFileFolder","updatedFiles","file","filteredFiles","className","children","title","items","onSelectItem","onAddItem","onDeleteItem","fileName","_jsxFileName","lineNumber","columnNumber","onSelectPassword","onAddPassword","onDeletePassword","folders","onSave","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/Julia/OneDrive/Documents/GitHub/vaultMaster/src/pages/personal_pw_manager.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport FileList from \"../components/fileList\";\r\nimport PasswordInformation from \"../components/passwordInformation\";\r\nimport AddPasswordForm from \"../components/addPasswordForm\";\r\nimport AddFolderForm from \"../components/addFolderForm\";\r\nimport \"./personal_pw_manager.css\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\n\r\nfunction PersonalPwManager() {\r\n  const [passwords, setPasswords] = useState([]);\r\n  const [passwordFolders, setPasswordFolders] = useState([]);\r\n  const [fileFolders, setFileFolders] = useState([]);\r\n  const [files, setFiles] = useState([]); // State for file content\r\n  const [selectedFolder, setSelectedFolder] = useState(null); // null means \"All Passwords\" or \"All Files\"\r\n  const [selectedPassword, setSelectedPassword] = useState(null);\r\n  const [selectedFileFolder, setSelectedFileFolder] = useState(null); // Track selected file folder\r\n  const [isAddingPassword, setIsAddingPassword] = useState(false);\r\n  const [isAddingPasswordFolder, setIsAddingPasswordFolder] = useState(false);\r\n  const [isAddingFileFolder, setIsAddingFileFolder] = useState(false);\r\n\r\n  // Add Password\r\n  const addPassword = (newPassword) => {\r\n    setPasswords([\r\n      ...passwords,\r\n      { id: passwords.length + 1, folderId: selectedFolder?.id || null, ...newPassword },\r\n    ]);\r\n    setIsAddingPassword(false);\r\n  };\r\n\r\n  // Add Folder for Passwords\r\n  const addPasswordFolder = (folderName) => {\r\n    setPasswordFolders([...passwordFolders, { id: passwordFolders.length + 1, name: folderName }]);\r\n    setIsAddingPasswordFolder(false);\r\n  };\r\n\r\n  // Add Folder for Files\r\n  const addFileFolder = (folderName) => {\r\n    setFileFolders([...fileFolders, { id: fileFolders.length + 1, name: folderName }]);\r\n    setIsAddingFileFolder(false);\r\n  };\r\n\r\n  // Delete Folder for Passwords\r\n  const deletePasswordFolder = (folderId) => {\r\n    if (window.confirm(\"Are you sure you want to delete this folder?\")) {\r\n      const updatedFolders = passwordFolders.filter((folder) => folder.id !== folderId);\r\n      setPasswordFolders(updatedFolders);\r\n\r\n      // Remove folder association from passwords\r\n      const updatedPasswords = passwords.map((password) =>\r\n        password.folderId === folderId ? { ...password, folderId: null } : password\r\n      );\r\n      setPasswords(updatedPasswords);\r\n    }\r\n  };\r\n\r\n  // Delete Folder for Files\r\n  const deleteFileFolder = (folderId) => {\r\n    if (window.confirm(\"Are you sure you want to delete this folder?\")) {\r\n      const updatedFolders = fileFolders.filter((folder) => folder.id !== folderId);\r\n      setFileFolders(updatedFolders);\r\n\r\n      // Remove folder association from files\r\n      const updatedFiles = files.filter((file) => file.folderId !== folderId);\r\n      setFiles(updatedFiles);\r\n    }\r\n  };\r\n\r\n  // Filtered Files by Folder\r\n  const filteredFiles =\r\n    selectedFileFolder === null\r\n      ? files\r\n      : files.filter((file) => file.folderId === selectedFileFolder.id);\r\n\r\n  return (\r\n    <div className=\"pw-manager-container\">\r\n      <div className=\"sidebar\">\r\n        <Sidebar\r\n          title=\"Passwords\"\r\n          items={passwordFolders}\r\n          onSelectItem={(folder) => setSelectedFolder(folder)}\r\n          onAddItem={() => setIsAddingPasswordFolder(true)}\r\n          onDeleteItem={deletePasswordFolder}\r\n        />\r\n        <Sidebar\r\n          title=\"Files\"\r\n          items={fileFolders}\r\n          onSelectItem={(folder) => setSelectedFileFolder(folder)} // Set the selected file folder\r\n          onAddItem={() => setIsAddingFileFolder(true)}\r\n          onDeleteItem={deleteFileFolder}\r\n        />\r\n      </div>\r\n      <div className=\"main-content\">\r\n        <FileList\r\n          passwords={passwords.filter(\r\n            (password) => !selectedFolder || password.folderId === selectedFolder.id\r\n          )}\r\n          onSelectPassword={(password) => setSelectedPassword(password)}\r\n          onAddPassword={() => setIsAddingPassword(true)}\r\n          onDeletePassword={(id) => setPasswords(passwords.filter((password) => password.id !== id))}\r\n        />\r\n        {isAddingPassword && (\r\n          <AddPasswordForm\r\n            folders={passwordFolders}\r\n            selectedFolder={selectedFolder}\r\n            onSave={addPassword}\r\n            onCancel={() => setIsAddingPassword(false)}\r\n          />\r\n        )}\r\n        {isAddingPasswordFolder && (\r\n          <AddFolderForm\r\n            onSave={addPasswordFolder}\r\n            onCancel={() => setIsAddingPasswordFolder(false)}\r\n          />\r\n        )}\r\n        {isAddingFileFolder && (\r\n          <AddFolderForm\r\n            onSave={addFileFolder}\r\n            onCancel={() => setIsAddingFileFolder(false)}\r\n          />\r\n        )}\r\n        {selectedPassword && <PasswordInformation password={selectedPassword} />}\r\n        {selectedFileFolder && (\r\n          <div className=\"file-folder-content\">\r\n            <h3>{selectedFileFolder.name}</h3>\r\n            <ul>\r\n              {filteredFiles.map((file) => (\r\n                <li key={file.id}>{file.name}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PersonalPwManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}